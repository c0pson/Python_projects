import customtkinter as ctk
from wonderwords import RandomSentence
import time

def destroy_old_page(page):
    children = page.winfo_children()
    children[-1].destroy()

def destroy_old_pages(page):
    for child in page.winfo_children():
        child.destroy()

def listener(event, keys_history, label_1, check, text, typ_time, app, points, wps_label, all_times, avarge_accuracy, score_label, speed_save, accuracy_save):
    if len(keys_history) == 0:
        typ_time[0] = time.time()
    characters = [  'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 
                    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
                    '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
                    'space', 'period' ]
    if len(text) == len(keys_history) and event.keysym != 'BackSpace':
        destroy_old_pages(app)
        load_new_game(app, all_times, avarge_accuracy, speed_save, accuracy_save)
        return
    if event.keysym == 'BackSpace' and len(keys_history):
        keys_history.pop()
        destroy_old_page(check)
    elif event.keysym == 'space' and text[len(keys_history)] == ' ':
        keys_history.append(' ')
        create_check_mark(check, 'green')
        points.append(1)
    elif event.keysym == 'period' and text[len(keys_history)] == '.':
        keys_history.append('.')
        create_check_mark(check, 'green')
        points.append(1)
    elif (event.keysym) == text[len(keys_history)]:
        keys_history.append(event.keysym)
        create_check_mark(check, 'green')
        points.append(1)
    elif event.keysym != text[len(keys_history)] and (event.keysym).lower() in characters:
        if event.keysym == 'space':
            keys_history.append(' ')
        elif event.keysym == 'period':
            keys_history.append('.')
        else:
            keys_history.append(event.keysym)
        create_check_mark(check, 'red')
        points.append(0)
    if len(text) == len(keys_history):
        if typ_time[0] != 0:
            typ_time[1] = time.time()
        all_times.append(len(text)/(5.1*(typ_time[1] - typ_time[0]))*60)
        avarge_time = 0
        for item in all_times:
            avarge_time += item
        wps_label.configure(text=f'Speed: {round((avarge_time / len(all_times)), 2)} wpm')
        accuracy = 0
        for item in points:
            accuracy += item
        avarge_accuracy.append((accuracy / len(points)))
        av_accuracy = 0
        for item in avarge_accuracy:
            av_accuracy += item
        score_label.configure(text=f'Accuracy: {round((av_accuracy / (len(avarge_accuracy)-1)*100), 2)}%')
        accuracy_save[0] = round((av_accuracy / (len(avarge_accuracy)-1)*100), 2)
        speed_save[0] = round((avarge_time / len(all_times)), 2)
    label_1.configure(text=f'{''.join(keys_history)}')

def create_check_mark(check, color):
    label = ctk.CTkFrame(master=check, width=14, height=3, fg_color=color)
    label.pack(side='left', padx=2)

def load_new_game(app, all_times, avarge_accuracy, speed_save, accuracy_save):
    font_x30 = ctk.CTkFont(family='JetBrains Mono Regular', size=30)
    font_x21 = ctk.CTkFont(family='JetBrains Mono Regular', size=21)
    text_text = RandomSentence().sentence()
    points = []
    keys_history = []
    typ_time = [0, 0]

    score_label = ctk.CTkLabel(master=app, text=f'Accuracy: {accuracy_save[0]}%', font=font_x21)
    score_label.pack(side='top', anchor='nw')

    wps_label = ctk.CTkLabel(master=app, text=f'Speed: {speed_save[0]} wpm', font=font_x21)
    wps_label.pack(side='top', anchor='nw')

    frame = ctk.CTkFrame(master=app)
    frame.pack(side='top', anchor='center', expand=True, pady=5)

    label = ctk.CTkLabel(master=frame, text=text_text, font=font_x30)
    label.pack(side='top', anchor='w', pady=10, padx=5)

    label_1 = ctk.CTkLabel(master=frame, text='' , font=font_x30)
    label_1.pack(side='top', anchor='w', pady=5, padx=5)

    check = ctk.CTkFrame(master=frame, height=5)
    check.pack(side='bottom', fill='x', padx=5)

    spacing_label = ctk.CTkLabel(master=app, text='', height=100)
    spacing_label.pack()

    app.bind('<Key>',
    lambda event: listener(event, keys_history, label_1, check, text_text, typ_time, app, points, wps_label, all_times, avarge_accuracy, score_label, speed_save, accuracy_save))

def main():
    app = ctk.CTk()
    app.geometry('1080x720')
    all_times = [0]
    avarge_accuracy = [0]
    speed_save = [0]
    accuracy_save = [0]
    load_new_game(app, all_times, avarge_accuracy, speed_save, accuracy_save)
    app.mainloop()

if __name__ == "__main__":
    main()
